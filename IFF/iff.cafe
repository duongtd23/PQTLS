mod! PRINCIPAL {
  [Prin]
  op intruder : -> Prin {constr}
}

mod! KEY {
  pr(PRINCIPAL)
  [Key]
  op k : Prin -> Key
  op p : Key -> Prin
  var P : Prin
  vars K1 K2 : Key
  eq p(k(P)) = P .
  ceq (K1 = K2) = true if not(p(K1) = intruder) and not(p(K2) = intruder) .
  ceq (K1 = K2) = false if not(p(K1) = intruder) and p(K2) = intruder .
}

mod! RAND {
  [Rand]
}

mod! CIPHER {
  pr(PRINCIPAL + KEY + RAND)
  [Cipher]
  op enc : Key Rand Prin -> Cipher {constr}
  op k : Cipher -> Key
  op r : Cipher -> Rand
  op p : Cipher -> Prin
  vars K K' : Key
  vars R R' : Rand
  vars P P' : Prin
  vars C1 C2 : Cipher
  eq k(enc(K,R,P)) = K .
  eq r(enc(K,R,P)) = R .
  eq p(enc(K,R,P)) = P .
  eq (enc(K,R,P) = enc(K',R',P')) = (K = K' and R = R' and P = P') .
}

mod! MSG {
  pr(PRINCIPAL + RAND + CIPHER)
  [Msg]
  --      creator source destination body
  --      ---------------------------------
  op cm : Prin    Prin   Prin        Rand   -> Msg {constr}
  op rm : Prin    Prin   Prin        Cipher -> Msg {constr}
  --
  op cm? : Msg -> Bool
  op rm? : Msg -> Bool
  op crt : Msg -> Prin
  op src : Msg -> Prin
  op dst : Msg -> Prin
  op r : Msg -> Rand
  op c : Msg -> Cipher
  --
  vars P1 P2 P3 P1' P2' P3' : Prin
  vars R R' : Rand
  vars C C' : Cipher
  vars M1 M2 : Msg
  --
  eq cm?(cm(P1,P2,P3,R)) = true .
  eq cm?(rm(P1,P2,P3,C)) = false .
  eq rm?(cm(P1,P2,P3,R)) = false .
  eq rm?(rm(P1,P2,P3,C)) = true .
  eq crt(cm(P1,P2,P3,R)) = P1 .
  eq crt(rm(P1,P2,P3,C)) = P1 .
  eq src(cm(P1,P2,P3,R)) = P2 .
  eq src(rm(P1,P2,P3,C)) = P2 .
  eq dst(cm(P1,P2,P3,R)) = P3 .
  eq dst(rm(P1,P2,P3,C)) = P3 .
  eq r(cm(P1,P2,P3,R)) = R .
  eq c(rm(P1,P2,P3,C)) = C .
  eq (cm(P1,P2,P3,R) = cm(P1',P2',P3',R'))
    = (P1 = P1' and P2 = P2' and P3 = P3' and R = R') .
  eq (rm(P1,P2,P3,C) = rm(P1',P2',P3',C'))
    = (P1 = P1' and P2 = P2' and P3 = P3' and C = C') .
  eq (cm(P1,P2,P3,R) = rm(P1',P2',P3',C')) = false .
  
  -- ceq (M1 = M2) = (cm?(M1) and crt(M1) = crt(M2) and src(M1) = src(M2) and dst(M1) = dst(M2) and r(M1) = r(M2)) if cm?(M2) .
  -- ceq (M1 = M2) = (rm?(M1) and crt(M1) = crt(M2) and src(M1) = src(M2) and dst(M1) = dst(M2) and c(M1) = c(M2)) if rm?(M2) .
}

mod! BAG (D :: TRIV) {
  [Elt.D < Bag]
  op void : -> Bag {constr}
  op _,_ : Bag Bag -> Bag {constr assoc comm id: void}
  op _\in_ : Elt.D Bag -> Bool
  var B : Bag
  vars E1 E2 : Elt.D
  eq E1 \in void = false .
  eq (E1 \in (E2 , B)) = 
    (if E1 = E2 then true else E1 \in B fi) .
}

mod! SET (D :: TRIV) {
  [Elt.D < Set]
  op empty : -> Set {constr}
  op __ : Set Set -> Set {constr assoc comm idem id: empty}
  op _\in_ : Elt.D Set -> Bool
  var S : Set
  vars E1 E2 : Elt.D
  eq E1 \in empty = false .
  eq (E1 \in (E2 S)) = 
    (if E1 = E2 then true else E1 \in S fi) .
}

mod! COLLECTION(D :: TRIV) {
  [Elt.D < Col]
  op _\in_ : Elt.D Col -> Bool
}

view TRIV2MSG from TRIV to MSG {
  sort Elt -> Msg
}
view TRIV2CIPHER from TRIV to CIPHER {
  sort Elt -> Cipher
}
view TRIV2RAND from TRIV to RAND {
  sort Elt -> Rand
}

mod! NETWORK {
  pr(BAG(D <= TRIV2MSG)*{ sort Bag -> Network })
  pr(COLLECTION(D <= TRIV2RAND)*{sort Col -> ColRands})
  pr(COLLECTION(D <= TRIV2CIPHER)*{sort Col -> ColCiphers})
--
  op rands : Network -> ColRands
  op ciphers : Network -> ColCiphers
--
  var NW : Network
  var M : Msg
  var R : Rand
  var C : Cipher
-- rands
  eq R \in rands(void) = false .
  eq R \in rands(M , NW) = 
    (cm?(M) and R = r(M)) or
    (rm?(M) and k(intruder) = k(c(M)) and R = r(c(M))) or
    (R \in rands(NW)) .
-- ciphers
  eq C \in ciphers(void) = false .
  eq C \in ciphers(M , NW) = 
    (rm?(M) and C = c(M)) or 
    (C \in ciphers(NW)) .
}

-- Identify-Friend-or-Foe System
mod* IFF {
  pr(NETWORK)
  pr(SET(D <= TRIV2RAND)*{sort Set -> URands})
  [Sys]
-- an arbitrary initial state
  op init : -> Sys {constr}
-- observations
  op nw : Sys -> Network
  op ur : Sys -> URands
-- actions
  op sdcm : Sys Prin Prin Rand -> Sys {constr}
  op sdrm : Sys Prin Msg -> Sys {constr}
  --
  op fkcm1 : Sys Prin Prin Rand -> Sys {constr}
  op fkrm1 : Sys Prin Prin Cipher -> Sys {constr}
  op fkrm2 : Sys Prin Prin Rand -> Sys {constr}

-- CafeOBJ variables
  var S : Sys
  vars A B B1 : Prin
  vars M1 M2 : Msg
  var R : Rand
  var C : Cipher
  var K : Key

-- for any initial state
  eq nw(init) = void .
  eq ur(init) = empty .

-- for action sdcm
  op c-sdcm : Sys Prin Prin Rand -> Bool
  eq c-sdcm(S,A,B,R) = (not (R \in ur(S))) .
  --
  ceq nw(sdcm(S,A,B,R)) = (cm(A,A,B,R) , nw(S)) if c-sdcm(S,A,B,R) .
  ceq ur(sdcm(S,A,B,R)) = (R ur(S))                if c-sdcm(S,A,B,R) .
  ceq sdcm(S,A,B,R)     = S                      if not c-sdcm(S,A,B,R) .

-- for action sdrm
  op c-sdrm : Sys Prin Msg -> Bool
  eq c-sdrm(S,A,M1) = (M1 \in nw(S) and cm?(M1) and A = dst(M1)) .
  --
  ceq nw(sdrm(S,A,M1)) = rm(A,A,src(M1),enc(k(A),r(M1),A)) , nw(S) if c-sdrm(S,A,M1) .
  eq ur(sdrm(S,A,M1))  = ur(S) .
  ceq sdrm(S,A,M1)     = S                                             if not c-sdrm(S,A,M1) .

-- for action fkcm1
  op c-fkcm1 : Sys Prin Prin Rand -> Bool
  eq c-fkcm1(S,A,B,R) = R \in rands(nw(S)) .
  --
  ceq nw(fkcm1(S,A,B,R)) = cm(intruder,A,B,R) , nw(S) if c-fkcm1(S,A,B,R) .
  eq ur(fkcm1(S,A,B,R))  = ur(S) .
  ceq fkcm1(S,A,B,R)     = S                         if not c-fkcm1(S,A,B,R) .

-- for action fkrm1
  op c-fkrm1 : Sys Prin Prin Cipher -> Bool
  eq c-fkrm1(S,A,B,C) = C \in ciphers(nw(S)) .
  --
  ceq nw(fkrm1(S,A,B,C)) = rm(intruder,A,B,C) , nw(S) if c-fkrm1(S,A,B,C) .
  eq ur(fkrm1(S,A,B,C))  = ur(S) .
  ceq fkrm1(S,A,B,C)     = S                         if not c-fkrm1(S,A,B,C) .

-- for action fkrm2
  op c-fkrm2 : Sys Prin Prin Rand -> Bool
  eq c-fkrm2(S,A,B,R) = R \in rands(nw(S)) .
  --
  ceq nw(fkrm2(S,A,B,R)) = rm(intruder,A,B,enc(k(intruder),R,A)) , nw(S) if c-fkrm2(S,A,B,R) .
  eq ur(fkrm2(S,A,B,R))  = ur(S) .
  ceq fkrm2(S,A,B,R)     = S                       if not c-fkrm2(S,A,B,R) .

-- INV
-- declare invariant candidates
  op inv1 : Sys Prin Prin Prin Key Rand -> Bool
  op inv2 : Sys Key Rand -> Bool

-- define invariant candidates
  eq inv1(S,A,B,B1,K,R) = 
    ((not(K = k(intruder)) and rm(A,B,B1,enc(K,R,B)) \in nw(S)) 
      implies not(B = intruder)) .
  eq inv2(S,K,R) = (enc(K,R,intruder) \in ciphers(nw(S)) 
    implies (K = k(intruder))) .
}