open INV .
  ops s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 : -> Sys .
  ops a b : -> Prin .
  ops k k2 : -> ClPriKeyEx .
	ops k' k2' : -> PqPriKey .
	op v : -> Version .
	ops r r2 : -> Rand .
  op css : -> CipherSuites .
  op cs : -> CipherSuite .
  op i : -> Sid .
  op kems : -> PqKemParams .
  
-- macros
  op pqCipher : -> PqCipher . 
  op signPrs : -> Cipher .
  op ci : -> Cipher .
  op certB : -> Cert .
  op seedMS : -> Seed .
  eq pqCipher = encapsCipher(pqPubKeyEn(k'),k2') .
  eq signPrs = encH(priKey(b),hParams(r,r2,clPubKeyEx(k),pqPubKeyEn(k'))) .
  eq certB = cert(b,pubKey(b),sign(ca,b,pubKey(b))) .
  eq seedMS = seedMs(r,r2,clPubKeyEx(k2),pqCipher) .
  eq ci = encFin(
    prf-ckey(prf-ms(k & k2 || pqKey(k' & k2', 2), seedMS), seedHs(r,r2)), 
    prf-cfin(
      prf-ms(k & k2 || pqKey(k' & k2',2), seedMS), 
      hFullHs(a,b,v,r,css,kems,r2,cs,i,certB,clPubKeyEx(k),pqPubKeyEn(k'),signPrs,
        clPubKeyEx(k2),pqCipher))) .

-- some conditions
  eq (a = intruder) = false .
  eq (b = intruder) = false .
  eq (a = b) = false .
  eq (k2 = k) = false .
  eq (k2' = k') = false .
  eq cs \in css = true .
  
-- transitions leading to the counterexample
  eq s1 = fkChello(init,a,b,v,r,css,kems) .
  eq s2 = shello(s1,r2,cs,i,intruder,a,b,v,r,css,kems) .
  eq s3 = scert(s2,a,b,v,r2,cs,i) .
  eq s4 = skeyex(s3,k,k',intruder,a,b,v,r,css,kems,r2,cs,i) .
  eq s5 = shelloDone(s4,a,b,r,r2,k,k',1) .
  eq s6 = fkCkeyex(s5,a,b,k2,k2',pqPubKeyEn(k')) .
  eq s7 = fkChangeCS(s6,a,b) .
  eq s8 = fkCfinish(s7,(k & k2) || pqKey(k' & k2',2),
    pubKey(b),
    sign(ca,b,pubKey(b)),
    a,b,v,r,css,kems,r2,cs,i,
    clPubKeyEx(k),pqPubKeyEn(k'),
    signPrs,
    clPubKeyEx(k2),pqCipher) .
  eq s9 = sChangeCS(s8,intruder,a,b,clPubKeyEx(k2),pqCipher,2,ci) .
  eq s10 = sfinish(s9,intruder,a,b,v,r,css,kems,r2,cs,i,
      k,k',1,
      clPubKeyEx(k2),pqCipher,2) .

  red pd2(s10,a,b, k & k2, k',k2',
    seedMS,seedHs(r,r2),
    hFullHs(a,b,v,r,css,kems,r2,cs,i,certB,clPubKeyEx(k),pqPubKeyEn(k'),signPrs, 
      clPubKeyEx(k2),pqCipher),2) .
close