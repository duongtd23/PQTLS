open INV .
  ops s1 s2 s3 s4 s5 s6 s7 s8 : -> Sys .
  ops a b : -> Prin .
  ops k k2 : -> ClPriKeyEx .
	ops k' k2' : -> PqPriKey .
	op v : -> Version .
	ops r r2 : -> Rand .
  op css : -> CipherSuites .
  op cs : -> CipherSuite .
  op i : -> Sid .
  op kems : -> PqKemParams .
  
-- macros
  op pqCipher : -> PqCipher . 
  op signPrs : -> Cipher .
  op certB : -> Cert .
  eq pqCipher = encapsCipher(pqPubKeyEn(k'),k2') .
  eq signPrs = encH(priKey(b),hParams(r,r2,clPubKeyEx(k),pqPubKeyEn(k'))) .
  eq certB = cert(b,pubKey(b),sign(ca,b,pubKey(b))) .

-- some conditions
  eq (a = intruder) = false .
  eq (b = intruder) = false .
  eq (a = b) = false .
  eq (k2 = k) = false .
  eq (k2' = k') = false .
  eq (r = r2) = false .
  eq cs \in css = true .
 
-- transitions leading to the counterexample
  eq s1 = chello(init,a,b,v,r,css,kems) .
  eq s2 = shello(s1,r2,cs,i,a,a,b,v,r,css,kems) .
  eq s3 = scert(s2,a,b,v,r2,cs,i) .
  eq s4 = skeyex(s3,k,k',a,a,b,v,r,css,kems,r2,cs,i) .
  eq s5 = shelloDone(s4,a,b,r,r2,k,k',1) .
  eq s6 = ckeyex(s5,k2,k2',a,b,v,r,css,kems,b,r2,cs,i,
    certB,
    clPubKeyEx(k),pqPubKeyEn(k'),
    signPrs,
    1) .
  eq s7 = cChangeCS(s6,a,b,pqPubKeyEn(k'),k2,k2',2) .
  eq s8 = cfinish(s7,a,b,v,r,css,kems,b,r2,cs,i,
    certB,
    clPubKeyEx(k),pqPubKeyEn(k'),
    signPrs,
    1,
    k2,k2',2) .

  red pd1(s8,a,b,k,k2, pqKey(k' & k2',2),
    seedMs(r,r2,clPubKeyEx(k2),pqCipher),
    seedHs(r,r2),
    hFullHs(a,b,v,r,css,kems,r2,cs,i,certB,clPubKeyEx(k),pqPubKeyEn(k'),signPrs, 
      clPubKeyEx(k2),pqCipher)) .
close